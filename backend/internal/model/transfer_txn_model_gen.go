// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	transferTxnFieldNames          = builder.RawFieldNames(&TransferTxn{})
	transferTxnRows                = strings.Join(transferTxnFieldNames, ",")
	transferTxnRowsExpectAutoSet   = strings.Join(stringx.Remove(transferTxnFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), ",")
	transferTxnRowsWithPlaceHolder = strings.Join(stringx.Remove(transferTxnFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), "=?,") + "=?"
)

type (
	transferTxnModel interface {
		Insert(ctx context.Context, data *TransferTxn) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TransferTxn, error)
		Update(ctx context.Context, data *TransferTxn) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTransferTxnModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TransferTxn struct {
		Id          int64     `db:"id"`
		Chain       int64     `db:"chain"`
		BlockNumber string    `db:"blockNumber"`
		TimeStamp   string    `db:"timeStamp"`
		Hash        string    `db:"hash"`
		BlockHash   string    `db:"blockHash"`
		From        string    `db:"from"`
		To          string    `db:"to"`
		Value       string    `db:"value"`
		CreateTime  time.Time `db:"create_time"`
		UpdateTime  time.Time `db:"update_time"`
	}
)

func newTransferTxnModel(conn sqlx.SqlConn) *defaultTransferTxnModel {
	return &defaultTransferTxnModel{
		conn:  conn,
		table: "`transfer_txn`",
	}
}

func (m *defaultTransferTxnModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTransferTxnModel) FindOne(ctx context.Context, id int64) (*TransferTxn, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", transferTxnRows, m.table)
	var resp TransferTxn
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTransferTxnModel) Insert(ctx context.Context, data *TransferTxn) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, transferTxnRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Chain, data.BlockNumber, data.TimeStamp, data.Hash, data.BlockHash, data.From, data.To, data.Value)
	return ret, err
}

func (m *defaultTransferTxnModel) Update(ctx context.Context, data *TransferTxn) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, transferTxnRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Chain, data.BlockNumber, data.TimeStamp, data.Hash, data.BlockHash, data.From, data.To, data.Value, data.Id)
	return err
}

func (m *defaultTransferTxnModel) tableName() string {
	return m.table
}
